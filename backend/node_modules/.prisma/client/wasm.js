
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  fullName: 'fullName',
  phone: 'phone',
  role: 'role',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  canAccessDashboard: 'canAccessDashboard'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId',
  sortOrder: 'sortOrder',
  isActive: 'isActive',
  productCount: 'productCount',
  minPrice: 'minPrice',
  maxPrice: 'maxPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  slug: 'slug',
  description: 'description',
  descriptionAr: 'descriptionAr',
  price: 'price',
  cost: 'cost',
  compareAtPrice: 'compareAtPrice',
  stockQuantity: 'stockQuantity',
  lowStockAlert: 'lowStockAlert',
  categoryId: 'categoryId',
  brand: 'brand',
  weight: 'weight',
  searchVector: 'searchVector',
  tags: 'tags',
  isFeatured: 'isFeatured',
  isActive: 'isActive',
  hasVariants: 'hasVariants',
  viewCount: 'viewCount',
  soldCount: 'soldCount',
  returnCount: 'returnCount',
  totalRevenue: 'totalRevenue',
  totalCost: 'totalCost',
  totalProfit: 'totalProfit',
  profitMargin: 'profitMargin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  alt: 'alt',
  sortOrder: 'sortOrder',
  isPrimary: 'isPrimary'
};

exports.Prisma.ProductColorScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  hexCode: 'hexCode',
  sortOrder: 'sortOrder'
};

exports.Prisma.ProductSizeScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  value: 'value',
  sizeType: 'sizeType',
  sortOrder: 'sortOrder'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  skuVariant: 'skuVariant',
  colorId: 'colorId',
  sizeId: 'sizeId',
  price: 'price',
  cost: 'cost',
  stockQuantity: 'stockQuantity',
  reservedQty: 'reservedQty',
  soldCount: 'soldCount',
  revenue: 'revenue'
};

exports.Prisma.ProductFilterAttributeScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  key: 'key',
  value: 'value'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  customerWilaya: 'customerWilaya',
  customerBaladiya: 'customerBaladiya',
  customerAddress: 'customerAddress',
  subtotal: 'subtotal',
  deliveryFee: 'deliveryFee',
  discountAmount: 'discountAmount',
  total: 'total',
  totalCost: 'totalCost',
  totalProfit: 'totalProfit',
  status: 'status',
  paymentStatus: 'paymentStatus',
  orderSource: 'orderSource',
  posSessionId: 'posSessionId',
  cashReceived: 'cashReceived',
  changeGiven: 'changeGiven',
  notes: 'notes',
  createdById: 'createdById',
  confirmedAt: 'confirmedAt',
  shippedAt: 'shippedAt',
  deliveredAt: 'deliveredAt',
  cancelledAt: 'cancelledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  customerEmail: 'customerEmail'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId',
  productName: 'productName',
  productSku: 'productSku',
  selectedColor: 'selectedColor',
  selectedSize: 'selectedSize',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  unitCost: 'unitCost',
  lineTotal: 'lineTotal',
  lineProfit: 'lineProfit',
  createdAt: 'createdAt'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  guestEmail: 'guestEmail',
  guestPhone: 'guestPhone'
};

exports.Prisma.CartItemScalarFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  variantId: 'variantId',
  quantity: 'quantity',
  addedAt: 'addedAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  cost: 'cost',
  budget: 'budget',
  startDate: 'startDate',
  endDate: 'endDate',
  campaignType: 'campaignType',
  isActive: 'isActive',
  totalRevenue: 'totalRevenue',
  totalOrders: 'totalOrders',
  roi: 'roi',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CampaignProductScalarFieldEnum = {
  campaignId: 'campaignId',
  productId: 'productId',
  allocatedCost: 'allocatedCost',
  impressions: 'impressions',
  clicks: 'clicks',
  conversions: 'conversions',
  revenue: 'revenue'
};

exports.Prisma.ProductAnalyticsScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  categoryId: 'categoryId',
  periodDate: 'periodDate',
  periodType: 'periodType',
  unitsSold: 'unitsSold',
  unitsReturned: 'unitsReturned',
  revenue: 'revenue',
  cost: 'cost',
  profit: 'profit',
  profitMargin: 'profitMargin',
  campaignRevenue: 'campaignRevenue',
  campaignCost: 'campaignCost',
  views: 'views',
  addedToCart: 'addedToCart',
  purchases: 'purchases',
  viewToCartRatio: 'viewToCartRatio',
  cartToPurchaseRatio: 'cartToPurchaseRatio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryAnalyticsScalarFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  periodDate: 'periodDate',
  periodType: 'periodType',
  totalProducts: 'totalProducts',
  unitsSold: 'unitsSold',
  revenue: 'revenue',
  cost: 'cost',
  profit: 'profit',
  profitMargin: 'profitMargin',
  avgOrderValue: 'avgOrderValue',
  topProducts: 'topProducts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DailySalesSummaryScalarFieldEnum = {
  id: 'id',
  date: 'date',
  totalOrders: 'totalOrders',
  pendingOrders: 'pendingOrders',
  confirmedOrders: 'confirmedOrders',
  deliveredOrders: 'deliveredOrders',
  cancelledOrders: 'cancelledOrders',
  totalRevenue: 'totalRevenue',
  totalCost: 'totalCost',
  totalProfit: 'totalProfit',
  totalDeliveryFees: 'totalDeliveryFees',
  averageOrderValue: 'averageOrderValue',
  campaignSpend: 'campaignSpend',
  campaignRevenue: 'campaignRevenue',
  topWilayas: 'topWilayas',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FilterConfigScalarFieldEnum = {
  id: 'id',
  filterType: 'filterType',
  displayName: 'displayName',
  values: 'values',
  isActive: 'isActive',
  sortOrder: 'sortOrder'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  fullName: 'fullName',
  phone: 'phone'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  parentId: 'parentId'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  slug: 'slug',
  description: 'description',
  descriptionAr: 'descriptionAr',
  categoryId: 'categoryId',
  brand: 'brand',
  searchVector: 'searchVector',
  tags: 'tags'
};

exports.Prisma.ProductImageOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  url: 'url',
  alt: 'alt'
};

exports.Prisma.ProductColorOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  hexCode: 'hexCode'
};

exports.Prisma.ProductSizeOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  value: 'value'
};

exports.Prisma.ProductVariantOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  skuVariant: 'skuVariant',
  colorId: 'colorId',
  sizeId: 'sizeId'
};

exports.Prisma.ProductFilterAttributeOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  key: 'key',
  value: 'value'
};

exports.Prisma.OrderOrderByRelevanceFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  customerWilaya: 'customerWilaya',
  customerBaladiya: 'customerBaladiya',
  customerAddress: 'customerAddress',
  posSessionId: 'posSessionId',
  notes: 'notes',
  createdById: 'createdById',
  customerEmail: 'customerEmail'
};

exports.Prisma.OrderItemOrderByRelevanceFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  variantId: 'variantId',
  productName: 'productName',
  productSku: 'productSku',
  selectedColor: 'selectedColor',
  selectedSize: 'selectedSize'
};

exports.Prisma.CartOrderByRelevanceFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  guestEmail: 'guestEmail',
  guestPhone: 'guestPhone'
};

exports.Prisma.CartItemOrderByRelevanceFieldEnum = {
  id: 'id',
  cartId: 'cartId',
  productId: 'productId',
  variantId: 'variantId'
};

exports.Prisma.CampaignOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  campaignType: 'campaignType',
  createdById: 'createdById'
};

exports.Prisma.CampaignProductOrderByRelevanceFieldEnum = {
  campaignId: 'campaignId',
  productId: 'productId'
};

exports.Prisma.ProductAnalyticsOrderByRelevanceFieldEnum = {
  id: 'id',
  productId: 'productId',
  categoryId: 'categoryId',
  periodType: 'periodType'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.CategoryAnalyticsOrderByRelevanceFieldEnum = {
  id: 'id',
  categoryId: 'categoryId',
  periodType: 'periodType'
};

exports.Prisma.DailySalesSummaryOrderByRelevanceFieldEnum = {
  id: 'id'
};

exports.Prisma.FilterConfigOrderByRelevanceFieldEnum = {
  id: 'id',
  filterType: 'filterType',
  displayName: 'displayName'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent'
};
exports.UserRole = exports.$Enums.UserRole = {
  admin: 'admin',
  sub_admin: 'sub_admin'
};

exports.SizeType = exports.$Enums.SizeType = {
  letter: 'letter',
  numeric: 'numeric',
  custom: 'custom'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed',
  refunded: 'refunded'
};

exports.OrderSource = exports.$Enums.OrderSource = {
  website: 'website',
  pos: 'pos',
  phone: 'phone'
};

exports.Prisma.ModelName = {
  User: 'User',
  Category: 'Category',
  Product: 'Product',
  ProductImage: 'ProductImage',
  ProductColor: 'ProductColor',
  ProductSize: 'ProductSize',
  ProductVariant: 'ProductVariant',
  ProductFilterAttribute: 'ProductFilterAttribute',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Cart: 'Cart',
  CartItem: 'CartItem',
  Campaign: 'Campaign',
  CampaignProduct: 'CampaignProduct',
  ProductAnalytics: 'ProductAnalytics',
  CategoryAnalytics: 'CategoryAnalytics',
  DailySalesSummary: 'DailySalesSummary',
  FilterConfig: 'FilterConfig',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
